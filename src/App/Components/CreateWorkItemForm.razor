@using Develix.AzureDevOps.Connector.Model;
@using Develix.AzureDevOps.Connector.Service;
@using System.Diagnostics.CodeAnalysis;
@using System.ComponentModel.DataAnnotations;

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard Elevation="2" Class="pa-3">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" xl="3">
                    <MudTextField Label="Project name"
                                  @bind-Value="model.Project"
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="HandleProjectFieldDebounced"
                                  For="() => model.Project" />
                </MudItem>
                <MudItem xs="12" sm="6" xl="3">
                    <MudTextField Label="Title" @bind-Value="model.Title" For="() => model.Title" />
                </MudItem>
                <MudItem xs="12" sm="6" xl="3">
                    <WorkItemTypeSelect WorkItemTypes="workItemTypes" @bind-Value="model.WorkItemType" For="() => model.WorkItemType" />
                </MudItem>
                <MudItem xs="12" sm="6" xl="3">
                    <AreaPathSelect AreaPaths="areaPaths" @bind-Value="model.AreaPath" For="() => model.AreaPath" />
                </MudItem>
                <MudItem xs="12" sm="6" xl="3">
                    <MudTextField Label="Assigned to" @bind-Value="model.AssignedTo" For="() => model.AssignedTo" />
                </MudItem>
                <MudItem xs="12" sm="6" xl="3">
                    <MudNumericField Label="Parent WI ID" @bind-Value="model.ParentWorkItemId" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Create</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [Inject]
    [NotNull]
    private IWorkItemService? workItemService { get; set; }

    private string project = string.Empty;
    private IReadOnlyList<WorkItemType> workItemTypes = Array.Empty<WorkItemType>();
    private IReadOnlyList<AreaPath> areaPaths = Array.Empty<AreaPath>();
    private Model model = new();

    private async Task HandleProjectFieldDebounced(string value)
    {
        var workItemTypesResult = await workItemService.GetWorkItemTypes(value);
        workItemTypes = workItemTypesResult.Valid
            ? workItemTypesResult.Value
            : Array.Empty<WorkItemType>();

        var areaPathsResult = await workItemService.GetAreaPaths(value, 3);
        areaPaths = areaPathsResult.Valid
            ? areaPathsResult.Value
            : Array.Empty<AreaPath>();
    }

    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        var template = new WorkItemCreateTemplate(model.Title, model.WorkItemType.Name, model.Project)
            {
                AreaId = model.AreaPath?.Id,
                AssignedTo = model.AssignedTo,
                ParentWorkItemId = model.ParentWorkItemId,
                Project = model.Project,
                Title = model.Title,
                WorkItemType = model.WorkItemType.Name,
            };
        workItemService.CreateWorkItem(template);
    }


    private class Model
    {
        [Required]
        [StringLength(int.MaxValue, MinimumLength = 1)]
        public string Title { get; set; } = string.Empty;

        [Required]
        public WorkItemType WorkItemType { get; set; } = WorkItemType.Invalid;

        [Required]
        [StringLength(int.MaxValue, MinimumLength = 1)]
        public string Project { get; set; } = string.Empty;

        public AreaPath? AreaPath { get; set; }

        public string? AssignedTo { get; set; }

        public int? ParentWorkItemId { get; set; }
    }
}
