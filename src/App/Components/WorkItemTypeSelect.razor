@using Develix.AzureDevOps.Connector.Model;
@using System.Linq.Expressions;

<MudSelect T="WorkItemType"
           For="@For"
           Dense="true"
           Disabled="GetDisabled()"
           Label="@GetLabel()"
           SelectedValuesChanged="SelectedWorkItemsChanged">
    @foreach (var wit in WorkItemTypes ?? Array.Empty<WorkItemType>())
    {
        <MudSelectItem Value="@wit"><MudImage Style="height: 1em" Src="@(wit.Icon?.AbsoluteUri)" /> @wit.Name</MudSelectItem>
    }
</MudSelect>
@code {
    [Parameter]
    [EditorRequired]
    public IReadOnlyList<WorkItemType>? WorkItemTypes { get; set; }

    [Parameter]
    public Expression<Func<WorkItemType>>? For { get; set; }

    [Parameter]
    public WorkItemType? Value { get; set; }

    [Parameter]
    public EventCallback<WorkItemType?> ValueChanged { get; set; }

    private async Task SelectedWorkItemsChanged(IEnumerable<WorkItemType> selectedWorkItemTypes)
    {
        var selectedWorkItem = selectedWorkItemTypes.FirstOrDefault();
        await ValueChanged.InvokeAsync(selectedWorkItem).ConfigureAwait(true);
    }

    private string GetLabel()
    {
        return WorkItemTypes switch
        {
            null or { Count: 0 } => "No work item types loaded",
            { Count: > 0 } => "Select work item type"
        };
    }

    private bool GetDisabled()
    {
        return WorkItemTypes switch
        {
            null or { Count: 0 } => true,
            { Count: > 0 } => false
        };
    }
}
