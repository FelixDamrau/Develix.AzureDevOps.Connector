@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/workitems"

@using Develix.AzureDevOps.Connector.Service
@using System.Diagnostics.CodeAnalysis

<MudPaper Elevation="2" Class="pa-4 ma-3">
    <MudGrid>
        <MudItem xs="12" sm="7" lg="9">
            <AzureDevOpsServiceLogin LoginServiceActionFactory="(u, t) => new LoginWorkItemServiceAction(u,t)" />
        </MudItem>
        <MudItem xs="12" sm="5" lg="3">
            <AzureDevOpsServiceStatus />
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="6">
            <MultiInputNumericField ChipPrefix="WI" Label="Work item ID" Values="@ids" OnValuesChange="() => {}" />
        </MudItem>
        <MudItem xs=6>
            <MudButton OnClick="GetWorkItems" Disabled="GetPullRequestsDisabled()">
                @if (!pageState.Value.IsLoading)
                {
                    <MudText>Get WIs</MudText>
                }
                else
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="pl-4">Loading</MudText>
                }
            </MudButton>
        </MudItem>
        <WorkItemCardView WorkItems="pageState.Value.WorkItems" />
    </MudGrid>
</MudPaper>

@code {
    [Inject]
    [NotNull]
    private IState<WorkItemPageState>? pageState { get; set; }

    [Inject]
    [NotNull]
    private IState<AzureDevOpsServicesState>? servicesState { get; set; }

    [Inject]
    [NotNull]
    private IDispatcher? dispatcher { get; set; }

    private readonly HashSet<int> ids = new();

    private void GetWorkItems()
    {
        var action = new GetWorkItemsAction(ids);
        dispatcher.Dispatch(action);
    }

    private bool GetPullRequestsDisabled()
    {
        return ids.Count == 0 || pageState.Value.IsLoading || servicesState.Value.WorkItemServiceConnectionStatus != Model.ConnectionStatus.Connected;
    }
}